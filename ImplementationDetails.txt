Serial Implementation (Matthew Hill & Joshua Talbot)
-- We made a point class containing the location of each point, as well as which cluster that point is assigned to, and the distance to the closest cluster
-- Main reads in the csv file containing the spotify data, performs the k-means-clustering algorithm, then writes it to a new file.
-- The clustering algorithm is as follow:
     -- We have k centroids. The location of each is randomized. We chose a set seed so that the output would be predictable and consistent.
     -- while more than one point changed:
          -- for each point, find the nearest centroid, and assign the point to that cluster.
          -- move the centroid to the average location of the points assigned to it.

OMP Implementation (Joshua Talbot)
-- This algorithm is extremely similar to the serial approach, using OpenMP in places that parallelization can be easily implemented.
-- Using this method we parallelized the reading and the writing of the data to files in main
-- Also implemented was Parallelization for calculating the mimimum distances for each point and moving the centroids. 

CUDA Implementation (Joshua Talbot)
-- CUDA parallelization was implemented in our cluster.cu file. We used kernal functions for computing the distances, the computation of summations, and updating the centroids.
-- The CUDA implementation is pretty different from the OMP and Serial Implementations, but the results are much the same.
     -- We set up some random centroids
     -- We compute the distances and update the centroids
     -- If no points have changes, we break out, just like OMP and the Serial

MPI Implementation

MPI + CUDA Implementation

Scaling Study

Rapid CSV

